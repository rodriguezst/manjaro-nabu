name: build-manjaro-unstable
on:
  workflow_dispatch:
#  schedule:
#    - cron:  '30 2 * * 1'

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  KERNEL_REPO: 'rodriguezst/linux'
  KERNEL_REF: 'v6.1.98-nabu'
  KERNEL_DEFCONFIG: 'xiaomi_nabu_defconfig'
  KERNEL_DTB_NAME: 'sm8150-xiaomi-nabu-maverick.dtb'
  # KERNEL_VERSION is set at "kernel" job
  QBOOTCTL_REPO: 'rodriguezst/qbootctl'
  QBOOTCTL_REF: 'main'

jobs:
  kernel:
    name: Build kernel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.KERNEL_REPO }}
          ref: ${{ env.KERNEL_REF }}
          fetch-depth: '1'

      - name: Install Dependencies
        run: sudo apt update && sudo apt install build-essential gcc-aarch64-linux-gnu bc flex bison 7zip kmod bash cpio binutils tar git wget dpkg libssl-dev

      - name: Build kernel
        run: |
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- $KERNEL_DEFCONFIG
          make -j$(nproc) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- Image.gz dtbs
          mkdir -p ./install/boot
          _kernel_version="$(make kernelrelease -s)"
          cp arch/arm64/boot/Image.gz ./install/boot/vmlinuz-$_kernel_version
          cp arch/arm64/boot/dts/qcom/$KERNEL_DTB_NAME ./install/boot/dtb-$_kernel_version
          make ARCH=arm64 install INSTALL_PATH=./install/boot
          make ARCH=arm64 dtbs_install INSTALL_DTBS_PATH=./install/boot/dtbs
          make -j$(nproc) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules
          make ARCH=arm64 modules_install INSTALL_MOD_PATH=./install
          mkdir -p ./install/usr/ && mv ./install/lib ./install/usr/lib
          cd ./install && tar zcvf ../kernel.tar.gz . && cd ..
          echo "KERNEL_VERSION=$_kernel_version" >> $GITHUB_ENV

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          # Artifact name
          name: built_kernel
          path: ${{ github.workspace }}/kernel.tar.gz
  
  qbootctl:
    name: Build qbootctl
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.KERNEL_REPO }}
          ref: ${{ env.KERNEL_REF }}
          path: kernel
          fetch-depth: '1'
      - name: Checkout qbootctl repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.QBOOTCTL_REPO }}
          ref: ${{ env.QBOOTCTL_REF }}
          path: qbootctl
          fetch-depth: '1'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Write script for docker
        run: |
          echo "#!/bin/bash" > run-in-docker.sh
          echo "export DEBIAN_FRONTEND=noninteractive" >> run-in-docker.sh
          echo "apt update" >> run-in-docker.sh
          echo "apt -y install make rsync zlib1g-dev meson cmake" >> run-in-docker.sh
          echo "cd kernel" >> run-in-docker.sh
          echo "make headers_install" >> run-in-docker.sh
          echo "cd ../qbootctl" >> run-in-docker.sh
          echo "meson build" >> run-in-docker.sh
          echo "meson compile -C build" >> run-in-docker.sh
          chmod +x run-in-docker.sh

      - name: Run in Docker
        run: |
          docker run \
            --rm \
            -v $(pwd):/${{ github.workspace }} \
            -w ${{ github.workspace }} \
            --platform linux/arm64 \
            ubuntu:latest \
            bash run-in-docker.sh
      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          # Artifact name
          name: built_qbootctl
          path: ${{ github.workspace }}/qbootctl/build/qbootctl

  rootfs:
    name: Build RootFS Image
    runs-on: ubuntu-22.04
    needs: [kernel, qbootctl]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        DEVICE: [generic-efi]
        EDITION: [gnome,gnome-mobile,gnome-mobile-dev,kde-plasma,plasma-mobile,plasma-mobile-dev,phosh,mate,xfce,lomiri,maui-shell,minimal]
        BRANCH: [unstable]
    steps:
      - uses: actions/checkout@v4
      -
        id: time
        uses: boredland/get-time-action@2.0.0
        with:
          format: 'YYYYMMDD'
      - 
        uses: actions/download-artifact@v4
        with:
          pattern: built_kernel
      - 
        uses: actions/download-artifact@v4
        with:
          pattern: built_qbootctl
      - 
        name: Unpack built kernel and install qbootctl
        shell: bash
        run: |
          cd overlay && tar zxvf ../built_kernel/kernel.tar.gz && cd ../
          mkdir -p overlay/usr/local/bin
          cp built_qbootctl/qbootctl overlay/usr/local/bin
          chmod +x overlay/usr/local/bin/qbootctl
          find overlay
      -
        id: image-build
        uses: manjaro-arm/rootfs@master
        with:
          device: ${{ matrix.device }}
          edition: ${{ matrix.edition }}
          branch: ${{ matrix.branch }}
          version: ${{ matrix.branch }}-${{ steps.time.outputs.time }}
          arm-profiles-repo: 'https://github.com/rodriguezst/manjaro-arm-profiles'
          #gpg-key: ${{ secrets.CI_GPG_SECRET }}
          #gpg-passphrase: ${{ secrets.CI_GPG_PASSPHRASE }}
      -
        name: Image customizations for nabu
        run: |
          sudo apt update && sudo apt install fdisk
          NEW_PATH=$(echo ${{ env.FILE_PATH }} | sed 's/${{ matrix.DEVICE }}/nabu/')
          mv ${{ env.FILE_PATH }} $NEW_PATH
          sudo ./scripts/update_fs.sh $NEW_PATH ${{ matrix.EDITION }}
      -
        name: Upload built artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          # Artifact name
          name: image-${{ matrix.EDITION }}-${{ matrix.BRANCH }}
          path: |
            *-rootfs.img.xz
            *-esp.img.xz
  release:
    name: Release
    runs-on: ubuntu-22.04
    needs: rootfs
    steps:
      -
        id: time
        uses: boredland/get-time-action@2.0.0
        with:
          format: 'YYYYMMDD'
      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: 'image-*'
          path: ./artifacts

      - name: Write release body
        run: |
          echo "The following Manjaro editions were successfuly built:" > ${{ github.workspace }}/RELEASE.md
          cd ./artifacts && ls -1 . >> ${{ github.workspace }}/RELEASE.md && cd ../
          sed -i 's/^image-/* /' ${{ github.workspace }}/RELEASE.md
          echo "**Build Log**: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> ${{ github.workspace }}/RELEASE.md
      - 
        name: Make release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.time.outputs.time }}-unstable-${{ github.run_id }}
          name: Manjaro ARM Unstable (${{ steps.time.outputs.time }})
          bodyFile: ${{ github.workspace }}/RELEASE.md
          draft: false
          prerelease: true
          artifacts: artifacts/**/*.xz
